module Image.Internal.Decode exposing (andMap, andThen2, array, foldl, listR, unsignedInt24)

import Array exposing (Array)
import Bitwise
import Bytes exposing (Endianness)
import Bytes.Decode as D exposing (Decoder, Step(..))


andThen2 : (a -> b -> Decoder c) -> Decoder a -> Decoder b -> Decoder c
andThen2 fn d1 d2 =
    D.andThen (\a -> D.andThen (fn a) d2) d1


andMap : Decoder a -> Decoder (a -> b) -> Decoder b
andMap argument function =
    D.map2 (<|) function argument


listR : Int -> Decoder a -> Decoder (Array a)
listR count decoder =
    D.loop { v1 = count, v2 = [] } (listStep decoder)


listStep : Decoder a -> { v1 : Int, v2 : Array a } -> Decoder (Step { v1 : Int, v2 : Array a } (Array a))
listStep decoder { v1 = n, v2 = xs } =
    if n <= 0 then
        D.succeed (Done xs)

    else
        D.map (\x -> Loop { v1 = n - 1, v2 = Array.pushFirst x xs }) decoder


array : Int -> Decoder a -> Decoder (Array a)
array count decoder =
    D.loop { v1 = count, v2 = Array.empty } (arrayStep decoder)


arrayStep : Decoder a -> { v1 : Int, v2 : Array a } -> Decoder (Step { v1 : Int, v2 : Array a } (Array a))
arrayStep decoder { v1 = n, v2 = xs } =
    if n <= 0 then
        D.succeed (Done xs)

    else
        D.map (\x -> Loop { v1 = n - 1, v2 = Array.pushFirst x xs }) decoder


foldl : Int -> (b -> Decoder b) -> b -> Decoder b
foldl count decoder acc =
    D.loop { v1 = count, v2 = acc } (foldlStep decoder)


foldlStep : (a -> Decoder b) -> { v1 : Int, v2 : a } -> Decoder (Step { v1 : Int, v2 : b } a)
foldlStep decoder { v1 = n, v2 = acc } =
    if n <= 0 then
        D.succeed (Done acc)

    else
        D.map (\x -> Loop { v1 = n - 1, v2 = x }) (decoder acc)


unsignedInt24 : Endianness -> Decoder Int
unsignedInt24 endianness =
    case endianness of
        Bytes.LE ->
            D.map2 (\b2 b1 -> Bitwise.or (Bitwise.shiftLeftBy 16 b1) b2) (D.unsignedInt16 endianness) D.unsignedInt8

        Bytes.BE ->
            D.map2 (\b1 b2 -> Bitwise.or (Bitwise.shiftLeftBy 8 b1) b2 {- |> Bitwise.shiftRightZfBy 0 -}) (D.unsignedInt16 endianness) D.unsignedInt8
