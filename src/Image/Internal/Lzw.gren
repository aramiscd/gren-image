module Image.Internal.Lzw exposing (decodeGifList, decoder, encode, encodeGifStream)

import Bytes exposing (Endianness(..))
import Bytes.Decode as D exposing (Decoder, Step(..))
import Bytes.Encode as E
import Dict
import Image.Internal.BitReader as BitReader
import Image.Internal.BitWriter as BitWriter exposing (BitWriter)
import Image.Internal.Decode as D


type alias CodeStream =
    Array Int


type alias Pixels =
    Array Int


decoder : Int -> D.Decoder (Array Int)
decoder colorCountPowerOfTwo =
    D.andThen2
        (\firstCodeSize_ count_firstBlock ->
            let
                firstCodeSize =
                    firstCodeSize_ + 1
            in
            D.bytes count_firstBlock
                |> D.andThen
                    (\bytes ->
                        let
                            { v1 = cc, v2 = eoi, v3 = table } =
                                initDecodeTable colorCountPowerOfTwo
                        in
                        BitReader.readBits firstCodeSize 0
                            |> BitReader.andThen
                                (\reset ->
                                    if reset /= cc then
                                        BitReader.error "No reset Bit present"

                                    else
                                        BitReader.readBits firstCodeSize 0
                                            |> BitReader.andThen
                                                (\first ->
                                                    let
                                                        value =
                                                            Dict.get first table
                                                                |> Maybe.withDefault []

                                                        acc =
                                                            { eoi = eoi -- end of information code
                                                            , table = table
                                                            , indexStream = value
                                                            , indexBuffer = value
                                                            , read = firstCodeSize
                                                            }
                                                    in
                                                    BitReader.loop acc bitDecoder
                                                )
                                )
                            |> BitReader.decode bytes
                            |> Result.toMaybe
                            |> Maybe.map D.succeed
                            |> Maybe.withDefault D.fail
                    )
        )
        D.unsignedInt8
        D.unsignedInt8


bitDecoder ({ eoi, table, indexStream, read, indexBuffer } as acc) =
    BitReader.readBits read 0
        |> BitReader.map
            (\code ->
                if code /= eoi && (2 ^ read - 1) < 4095 then
                    case Dict.get code table of
                        Just v ->
                            let
                                k =
                                    Array.first v |> Maybe.withDefault -404

                                tableValue =
                                    indexBuffer ++ [ k ]

                                tableKey =
                                    Dict.count table

                                newRead =
                                    if tableKey >= 2 ^ read - 1 then
                                        read + 1

                                    else
                                        read
                            in
                            Loop
                                { acc
                                    | table = Dict.set tableKey tableValue table
                                    , indexStream = Array.append indexStream v
                                    , indexBuffer = v
                                    , read = newRead
                                }

                        Nothing ->
                            let
                                k =
                                    indexBuffer
                                        |> Array.first
                                        |> Maybe.withDefault -404

                                tableValue =
                                    indexBuffer ++ [ k ]

                                newRead =
                                    if code >= 2 ^ read - 1 then
                                        read + 1

                                    else
                                        read
                            in
                            Loop
                                { acc
                                    | table = Dict.set code tableValue table
                                    , indexStream = Array.append indexStream tableValue
                                    , indexBuffer = tableValue
                                    , read = newRead
                                }

                else
                    -- TODO add reset on 4095
                    Done indexStream
            )


decodeGifList : Int -> Array Int -> CodeStream
decodeGifList size data =
    let
        { v1 = cc, v2 = eoi, v3 = table } =
            initDecodeTable size
    in
    case Array.popFirst data of
        Nothing ->
            []

        Just { first = _, rest = tail } ->
            case Array.popFirst tail of
                Just { first, rest } ->
                    let
                        value =
                            Dict.get first table |> Maybe.withDefault []
                    in
                    decodeGifList_ eoi table value rest value

                Nothing ->
                    []


decodeGifList_ eoi table indexStream codeStream code__1 =
    case Array.popFirst codeStream of
        Just { first = code, rest = rest } ->
            if code == eoi then
                indexStream

            else
                case Dict.get code table of
                    Just v ->
                        let
                            k =
                                v
                                    |> Array.first
                                    |> Maybe.withDefault -404

                            tableValue =
                                code__1 ++ [ k ]

                            tableKey =
                                Dict.count table
                        in
                        decodeGifList_ eoi (Dict.set tableKey tableValue table) (indexStream ++ v) rest v

                    Nothing ->
                        let
                            k =
                                code__1
                                    |> Array.first
                                    |> Maybe.withDefault -404

                            tableValue =
                                code__1 ++ [ k ]
                        in
                        decodeGifList_ eoi (Dict.set code tableValue table) (indexStream ++ tableValue) rest tableValue

        Nothing ->
            indexStream


type alias DecodeTable =
    { v1 : Int, v2 : Int, v3 : Dict.Dict Int (Array Int) }


initDecodeTable : Int -> DecodeTable
initDecodeTable lastColorIndex =
    let
        cc =
            lastColorIndex + 1

        eoi =
            lastColorIndex + 2

        table =
            Array.range 0 lastColorIndex
                |> Array.foldl (\k -> Dict.set k [ k ]) Dict.empty
                |> Dict.set cc [ cc ]
                |> Dict.set eoi [ eoi ]
    in
    { v1 = cc, v2 = eoi, v3 = table }



---------------------------------------------------------------------------------------------------------------------------------------------------


type alias EncodeTable =
    { v1 : Int, v2 : Int, v3 : Dict.Dict String Int }


initEncodeTable : Int -> EncodeTable
initEncodeTable lastColorIndex =
    let
        cc =
            lastColorIndex + 1

        eoi =
            lastColorIndex + 2

        table =
            Array.range 0 lastColorIndex
                |> Array.foldl (\k -> Dict.set (String.fromInt k) k) Dict.empty
                |> Dict.set (String.fromInt cc) cc
                |> Dict.set (String.fromInt eoi) eoi
    in
    { v1 = cc, v2 = eoi, v3 = table }


encode : Int -> Pixels -> E.Encoder
encode lastColorIndex data =
    let
        { v1 = cc, v2 = eoi, v3 = table } =
            initEncodeTable lastColorIndex
    in
    case Array.popFirst data of
        Nothing ->
            E.sequence []

        Just { first = i, rest = rest } ->
            let
                firstCodeSize =
                    lzwCodeSize cc

                output =
                    BitWriter.empty
                        |> BitWriter.writeBits (firstCodeSize + 1) cc

                resultBytes =
                    encode_ eoi table rest output (String.fromInt i) 0
                        |> BitWriter.flush
                        |> BitWriter.run
                        |> E.sequence
                        |> E.encode
            in
            E.sequence
                [ E.unsignedInt8 firstCodeSize
                , E.unsignedInt8 (Bytes.length resultBytes)
                , E.bytes resultBytes
                ]


encode_ : Int -> Dict.Dict String Int -> Array Int -> BitWriter -> String -> Int -> BitWriter
encode_ eoi table input output indexBuffer bytesWritten =
    case Array.popFirst input of
        Just { first = k, rest = rest } ->
            let
                key =
                    indexBuffer ++ "," ++ String.fromInt k
            in
            case Dict.get key table of
                Nothing ->
                    let
                        tableIndex =
                            Dict.count table

                        { v1 = newTable, v2 = newOutput } =
                            if tableIndex <= 4095 then
                                let
                                    newTable_ =
                                        Dict.set key tableIndex table

                                    newOutput_ =
                                        output
                                            |> BitWriter.writeBits (lzwCodeSize tableIndex)
                                                (Dict.get indexBuffer table |> Maybe.withDefault -404)
                                in
                                { v1 = newTable_, v2 = newOutput_ }

                            else
                                let
                                    { v1 = cc, v2 = _, v3 = newTable_ } =
                                        initEncodeTable (eoi - 1)

                                    --TODO validate that it works
                                    newOutput_ =
                                        output |> BitWriter.writeBits (lzwCodeSize cc + 1) cc
                                in
                                { v1 = newTable_, v2 = newOutput_ }
                    in
                    encode_ eoi newTable rest newOutput (String.fromInt k) bytesWritten

                Just _ ->
                    encode_ eoi table rest output key bytesWritten

        Nothing ->
            let
                bitsToWrite =
                    Dict.count table
                        |> lzwCodeSize
            in
            output
                |> BitWriter.writeBits bitsToWrite (Dict.get indexBuffer table |> Maybe.withDefault -404)
                |> BitWriter.writeBits bitsToWrite eoi


lzwCodeSize : Int -> Int
lzwCodeSize input =
    if input <= 4 then
        2

    else if input <= 8 then
        3

    else if input <= 16 then
        4

    else if input <= 32 then
        5

    else if input <= 64 then
        6

    else if input <= 128 then
        7

    else if input <= 256 then
        8

    else if input <= 512 then
        9

    else if input <= 1024 then
        10

    else if input <= 2048 then
        11

    else if input <= 4096 then
        12

    else
        0


encodeGifStream_ : Int -> Dict.Dict String Int -> Array Int -> Array Int -> String -> CodeStream
encodeGifStream_ eoi table data codeStream indexBuffer =
    --https://www.matthewflickinger.com/lab/whatsinagif/lzw_image_data.asp
    case Array.popFirst data of
        Just { first = k, rest = rest } ->
            let
                key =
                    indexBuffer ++ "," ++ String.fromInt k
            in
            case Dict.get key table of
                Nothing ->
                    let
                        newTable =
                            Dict.set key (Dict.count table) table

                        newCodeStream =
                            Array.pushFirst (Dict.get indexBuffer table |> Maybe.withDefault -404) codeStream
                    in
                    encodeGifStream_ eoi newTable rest newCodeStream (String.fromInt k)

                Just _ ->
                    encodeGifStream_ eoi table rest codeStream key

        Nothing ->
            codeStream
                |> Array.pushFirst (Dict.get indexBuffer table |> Maybe.withDefault -404)
                |> Array.pushFirst eoi
                |> Array.reverse


encodeGifStream : Int -> Pixels -> CodeStream
encodeGifStream lastColorIndex data =
    let
        { v1 = cc, v2 = eoi, v3 = table } =
            initEncodeTable lastColorIndex
    in
    case Array.popFirst data of
        Nothing ->
            []

        Just { first = i, rest = rest } ->
            encodeGifStream_ eoi table rest [ cc ] (String.fromInt i)



----DELME PART!!!


reverseList : Int -> Decoder a -> Decoder (Array a)
reverseList len decoder_ =
    D.loop { v1 = len, v2 = [] } (listStep decoder_)


listStep : Decoder a -> { v1 : Int, v2 : Array a } -> Decoder (Step { v1 : Int, v2 : Array a } (Array a))
listStep decoder_ { v1 = n, v2 = xs } =
    if n <= 0 then
        D.succeed (Done xs)

    else
        D.map (\x -> Loop { v1 = n - 1, v2 = Array.pushFirst x xs }) decoder_
